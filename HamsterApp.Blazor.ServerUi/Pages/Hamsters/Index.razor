@page "/hamsters/"
@inject IHamsterService hamsterService
@inject IJSRuntime jsRuntime
<h3>Hamster Gallery</h3>

@if (response.Success == false)
{
    <div class="alert alert-danger">
        <h4>Loading Data...</h4>
    </div>
}

@if (Model != null)
{
    <a class="btn btn-primary" href="/hamsters/create"><span class="oi oi-plus" aria-hidden="true"></span> Add New Hamster</a>
    <br />
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name: </th>
                <th>Age: </th>
                <th>Wins: </th>
                <th>Losses: </th>
                <th>Action: </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var hamster in Model)
            {
                <tr>
                    <td>@hamster.Name</td>
                    <td>@hamster.Age</td>
                    <td>@hamster.Wins</td>
                    <td>@hamster.Losses</td>
                    <td>
                        <a class="btn btn-primary" href="/hamsters/detail/@hamster.Id"><span class="oi oi-bell" aria-hidden="true"></span>Details</a>
                        <a class="btn btn-warning" href="/hamsters/update/@hamster.Id"><span class="oi oi-pencil" aria-hidden="true"></span>Edit</a>
                        <button class="btn btn-danger" @onclick=@(() => Delete(@hamster.Id))><span class="oi oi-delete" aria-hidden="true"></span>Delete</button>
                    </td>
                    <td class="col-md-2">
                        <img src="@hamster.ImgName" class="w-100" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    if (IsLoading)
    {
        <div class="row my-2 d-flex justify-content-center">
            <div class="col-lg-8 col-md-6 pb-4 filter">
                <img class="card-img-top img-fluid d-block my-auto mb-3" src="/images/hamsterGallery_loading.gif">
            </div>
        </div>
    }
    else
    {
        <p>There are no hamsters to display.</p>
    }
}

@code {
    private List<HamsterReadOnlyDto> Model;
    private Response<List<HamsterReadOnlyDto>> response = new Response<List<HamsterReadOnlyDto>> { Success = true };
    public bool IsLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        response = await hamsterService.GetHamsters();
        if (response.Success)
        {
            Model = response.Data;
        }
    }

    private async Task Delete(int hamsterId)
    {
        var hamster = Model.First(u => u.Id == hamsterId);
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you wish to delete {hamster.Name}?");
        if (confirm)
        {
            var response = await hamsterService.DeleteHamster(hamsterId);
            if (response.Success)
            {
                await jsRuntime.SweetAlertSuccess("Hamster Deleted");
                await OnInitializedAsync();
            }
        }
    }
}
