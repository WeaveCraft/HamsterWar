@page "/hamsters/"
@inject IHamsterService hamsterService
@inject IJSRuntime js
<h3>Hamster Gallery</h3>

@if(response.Success == false)
{
    <div class="alert alert-danger">
        <h4>Loading Data...</h4>
    </div>
}

@if(Model == null)
{
    <div class="alert alert-info">
        <h4>@response.Message</h4>
    </div>
}
else
{
    <a class="btn btn-primary" href="/hamsters/create"><span class="oi oi-plus" aria-hidden="true"></span> Add New Hamster</a>
    <br />
    <table class="table table-responsive">
        <thead>
            <tr>
            <th>Name: </th>
            <th>Age: </th>
            <th>Action: </th>
            </tr>
        </thead>
        <tbody>
            @foreach(var hamster in Model)
            {
                <tr>
                    <td>@hamster.Name</td>
                    <td>@hamster.Age</td>
                    <td>
                        <a class="btn btn-primary" href="/hamsters/details"><span class="oi oi-bell" aria-hidden="true"></span>Details</a>
                        <a class="btn btn-warning" href="/hamsters/update/@hamster.Id"><span class="oi oi-pencil" aria-hidden="true"></span>Edit</a>
                        <a class="btn btn-danger" href="/hamsters/delete"><span class="oi oi-delete" aria-hidden="true"></span>Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<HamsterReadOnlyDto> Model;
    private Response<List<HamsterReadOnlyDto>> response = new Response<List<HamsterReadOnlyDto>>{ Success = true };

    protected override async Task OnInitializedAsync()
    {
        response = await hamsterService.GetHamsters();
        if (response.Success)
        {
            Model = response.Data;
        }
    }
}
