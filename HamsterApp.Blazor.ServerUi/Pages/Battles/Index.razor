@page "/battle/"
@inject IHamsterService hamsterService
@inject IJSRuntime jsRuntime
<h3>Hamster Battle</h3>

@if (response.Success == false)
{
    <div class="alert alert-danger">
        <h4>Loading Data...</h4>
    </div>
}

@if (Model == null)
{
    <div class="alert alert-info">
        <h4>@response.Message</h4>
    </div>
}
else
{
    <div class="row container pb-3 backgroundWhite">
        <div class="col-12">
            <div class="row my-2 d-flex justify-content-center">
                @foreach (var hamster in Model)
                    @foreach (var hamster2 in Model2)
                    {
                        <div class="col-lg-4 col-md-6 pb-4 filter">
                            <div class="card bg-white rounded shadow-sm" style="border:1px solid #222">
                                <div class="card-body pb-1 row">
                                    <div class="col-8 h5">@hamster.Name</div>
                                    <div class="col-4 text-end"><span class="text-info h4">Age: @hamster.Age</span></div>
                                </div>
                                <button @onclick=@(e => { Win1(hamster.Id); Lose2(hamster2.Id); })> <img class="card-img-top img-fluid d-block mx-auto mb-3" src="@hamster.ImgName" alt="@hamster.Name"> </button>
                                <div class="card-body p-1 px-3 row">
                                    <div class="col-6">
                                        <span class="badge p-2 border w-100 text-white bg-info ">Favorite Food: @hamster.FavFood</span>
                                    </div>
                                    <div class="col-6 border-0">
                                        <span class="badge p-2 border w-100 text-white bg-info ">Loves: @hamster.Loves</span>
                                    </div>

                                    <div class="col-12 pt-2" style="font-size:13px; text-align:center">
                                        <p>Total Games Played: @hamster.Games</p>
                                    </div>

                                    <div class="col-6 border-0">
                                        <span class="badge p-2 border w-100 bg-success">Wins: @hamster.Wins</span>
                                    </div>
                                    <div class="col-6 border-0">
                                        <span class="badge p-2 border w-100 bg-danger ">Losses: @hamster.Losses</span>
                                    </div>
                                </div>

                            </div>
                        </div>

                        <div class="col-lg-4 col-md-6 pb-4 filter">
                            <div class="card bg-white rounded shadow-sm" style="border:1px solid #222">
                                <div class="card-body pb-1 row">
                                    <div class="col-8 h5">@hamster2.Name</div>
                                    <div class="col-4 text-end"><span class="text-info h4">Age: @hamster2.Age</span></div>
                                </div>
                                <button @onclick=@(e => { Win2(hamster2.Id); Lose1(hamster.Id); })> <img class="card-img-top img-fluid d-block mx-auto mb-3" src="@hamster2.ImgName" alt="@hamster2.Name"> </button>
                                <div class="card-body p-1 px-3 row">
                                    <div class="col-6">
                                        <span class="badge p-2 border w-100 text-white bg-info ">Favorite Food: @hamster2.FavFood</span>
                                    </div>
                                    <div class="col-6 border-0">
                                        <span class="badge p-2 border w-100 text-white bg-info ">Loves: @hamster2.Loves</span>
                                    </div>

                                    <div class="col-12 pt-2" style="font-size:13px; text-align:center">
                                        <p>Total Games Played: @hamster2.Games</p>
                                    </div>

                                    <div class="col-6 border-0">
                                        <span class="badge p-2 border w-100 bg-success">Wins: @hamster2.Wins</span>
                                    </div>
                                    <div class="col-6 border-0">
                                        <span class="badge p-2 border w-100 bg-danger ">Losses: @hamster2.Losses</span>
                                    </div>
                                </div>

                            </div>
                        </div>
                    }
            </div>
        </div>
    </div>

}

@code {
    private List<HamsterDetailsDto> Model;
    private List<HamsterDetailsDto> Model2;
    private Response<List<HamsterDetailsDto>> response = new Response<List<HamsterDetailsDto>> { Success = true };
    private Response<List<HamsterDetailsDto>> response2 = new Response<List<HamsterDetailsDto>> { Success = true };

    protected override async Task OnInitializedAsync()
    {
        response = await hamsterService.GetOneHamsters();
        do
        {
            response2 = await hamsterService.GetOneHamsters();
        } while (response == response2);
        if (response.Success && response2.Success)
        {
            Model = response.Data;
            Model2 = response2.Data;
        }
    }

    private async Task Win1(int hamsterId)
    {
        var hamster = Model.First(u => u.Id == hamsterId);
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", $"Vote for {hamster.Name}?");
        if (confirm)
        {
            var response = await hamsterService.Wins(hamsterId);
            if (response.Success)
            {
                //await jsRuntime.SweetAlertSuccess($"{hamsterId} is the Cutest");
                await OnInitializedAsync();
            }
        }
    }
    private async Task Win2(int hamsterId)
    {
        var hamster = Model2.First(u => u.Id == hamsterId);
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", $"Vote for {hamster.Name}?");
        if (confirm)
        {
            var response = await hamsterService.Wins(hamsterId);
            if (response.Success)
            {
                //await jsRuntime.SweetAlertSuccess($"{hamsterId} is the Cutest");
                await OnInitializedAsync();
            }
        }
    }
    private async Task Lose1(int id)
    {
        var hamster = Model.First(u => u.Id == id);
        var response = await hamsterService.Losses(id);
        if (response.Success)
        {
            //await jsRuntime.SweetAlertSuccess($"{hamsterId} is the Cutest");
            await OnInitializedAsync();
        }
    }
    private async Task Lose2(int id)
    {
        var hamster = Model2.First(u => u.Id == id);
        var response = await hamsterService.Losses(id);
        if (response.Success)
        {
            //await jsRuntime.SweetAlertSuccess($"{hamsterId} is the Cutest");
            await OnInitializedAsync();
        }
    }
    }
